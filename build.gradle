import groovy.json.JsonSlurper
import java.text.SimpleDateFormat
import java.nio.charset.StandardCharsets

plugins {
    id "java"
    id "application"
    id "com.diffplug.spotless" version "6.23.+"
    id "edu.wpi.first.GradleRIO" version "2024.1.1"
    id 'com.github.johnrengelman.shadow' version '7.+'
}

project.setVersion('1.0.0-COMPETITION')

application {
    mainClass.set('org.robotalons.crescendo.Main')
}

repositories {
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }

    maven {
         url = uri("https://maven.pkg.github.com/FRC5411/utility-main-talonLib")
         credentials {
             username = "Mechanical-Advantage-Bot"
             password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
         }
    }
    
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    jarTask = shadowJar
                }

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false

def includeDesktopSupport = true

configurations.all {
    exclude group: "edu.wpi.first.wpilibj"
}

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.0-alpha1'
    
    implementation group: 'org.talonrobotics', name: 'talonlib', version: '2024.1.0-Beta'    

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()
    
    def akitJson = new JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"
    
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.8.2'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

spotless {
    java {
        target fileTree('src') {
            include '**/*.java'
        }
        toggleOffOn()
        removeUnusedImports()
        importOrder('edu','com','org','java', '', '\\#').wildcardsLast()
        setEncoding(StandardCharsets.UTF_8)
        indentWithSpaces(2)
    }
}

build.dependsOn(spotlessApply)

java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// def getVersionControlBranch() {
//     return """git --git-dir=${rootDir}/../.git
//                                --work-tree=${rootDir}/..
//                                rev-parse --abbrev-ref HEAD""".execute().text.trim()
// }

// jar {
//     manifest {
//         attributes(
//             'Built-By'              : System.getProperty("user.name"),
//             'Build-Timestamp'       : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
//             'Build-Jdk'             : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
//             'Created-By'            : "Gradle ${gradle.gradleVersion}",
//             'Implementation-Title'  : "${project.name}-${getVersionControlBranch() ?: 'unregistered'}",
//             'Implementation-Version': project.version)
//     }
// }

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDoclint=summary'
    options.compilerArgs.add '-XDstringConcat=inline'
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    exclude ('org/robotalons/crescendo/**')
    options.addStringOption('Xdoclint:none', '-quiet')    
    options.addStringOption("docencoding", "utf-8")    
    options.addStringOption("charset", "utf-8")
    options.addStringOption("encoding", "utf-8")
    destinationDir = layout.projectDirectory.dir("..").dir("docs").asFile
}
